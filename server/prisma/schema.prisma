// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  firstName        String?
  lastName         String?
  imageUrl         String?
  clerkUserId      String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Transaction      Transaction[]
  Subscription     Subscription[]
  FinancialProfile FinancialProfile?
}

model FinancialProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  monthlySalary     Float
  needsPercentage   Float    @default(50)
  wantsPercentage   Float    @default(30)
  savingsPercentage Float    @default(20)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Transaction {
  id          String          @id @default(uuid())
  amount      Float
  description String?
  date        DateTime        @default(now())
  tag         Tag             @default(OTHER)
  type        TransactionType @default(EXPENSE)
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum Tag {
  FOOD
  TRANSPORTATION
  SHOPPING
  ENTERTAINMENT
  BILLS
  HEALTH
  TRAVEL
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum SubscriptionFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Subscription {
  id        String                @id @default(uuid())
  name      String
  amount    Float
  startDate DateTime
  endDate   DateTime?
  frequency SubscriptionFrequency
  userId    String
  user      User                  @relation(fields: [userId], references: [id])
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}
